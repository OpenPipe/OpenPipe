import { type CompletionCreateParams } from "openai/resources/chat";
import { openai } from "../../utils/openai";
import { isAxiosError } from "./utils";

export const autogenerateDatasetInputs = async (
  numToGenerate: number,
  customInstructions: string,
): Promise<string[]> => {
  const messages: CompletionCreateParams.CreateChatCompletionRequestNonStreaming["messages"] = [
    {
      role: "system",
      content: `The user needs ${numToGenerate} rows of data that match the following instructions:\n---\n" + ${customInstructions}`,
    },
  ];

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages,
      functions: [
        {
          name: "add_list_of_data",
          description: "Add a list of data to the database",
          parameters: {
            type: "object",
            properties: {
              rows: {
                type: "array",
                description: "The rows of data that match the instructions",
                items: {
                  type: "string",
                },
              },
            },
          },
        },
      ],

      function_call: { name: "add_list_of_data" },
      temperature: 0.5,
    });

    const parsed = JSON.parse(
      completion.choices[0]?.message?.function_call?.arguments ?? "{rows: []}",
    ) as { rows: string[] };
    return parsed.rows;
  } catch (e) {
    // If it's an axios error, try to get the error message
    if (isAxiosError(e)) {
      console.error(e?.response?.data?.error?.message);
    } else {
      console.error(e);
    }
  }

  return [];
};
