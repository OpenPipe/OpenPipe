# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .create_chat_completion_request_req_payload_function_call import CreateChatCompletionRequestReqPayloadFunctionCall
from .create_chat_completion_request_req_payload_functions_item import (
    CreateChatCompletionRequestReqPayloadFunctionsItem,
)
from .create_chat_completion_request_req_payload_messages_item import CreateChatCompletionRequestReqPayloadMessagesItem
from .create_chat_completion_request_req_payload_response_format import (
    CreateChatCompletionRequestReqPayloadResponseFormat,
)
from .create_chat_completion_request_req_payload_tool_choice import CreateChatCompletionRequestReqPayloadToolChoice
from .create_chat_completion_request_req_payload_tools_item import CreateChatCompletionRequestReqPayloadToolsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateChatCompletionRequestReqPayload(pydantic.BaseModel):
    """
    DEPRECATED. Use the top-level fields instead
    """

    model: str
    messages: typing.List[CreateChatCompletionRequestReqPayloadMessagesItem]
    function_call: typing.Optional[CreateChatCompletionRequestReqPayloadFunctionCall]
    functions: typing.Optional[typing.List[CreateChatCompletionRequestReqPayloadFunctionsItem]]
    tool_choice: typing.Optional[CreateChatCompletionRequestReqPayloadToolChoice]
    tools: typing.Optional[typing.List[CreateChatCompletionRequestReqPayloadToolsItem]]
    n: typing.Optional[float]
    max_tokens: typing.Optional[float]
    temperature: typing.Optional[float]
    response_format: typing.Optional[CreateChatCompletionRequestReqPayloadResponseFormat]
    stream: typing.Optional[bool]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
