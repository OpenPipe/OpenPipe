# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .unstable_dataset_entry_create_request_entries_item_function_call import (
    UnstableDatasetEntryCreateRequestEntriesItemFunctionCall,
)
from .unstable_dataset_entry_create_request_entries_item_functions_item import (
    UnstableDatasetEntryCreateRequestEntriesItemFunctionsItem,
)
from .unstable_dataset_entry_create_request_entries_item_messages_item import (
    UnstableDatasetEntryCreateRequestEntriesItemMessagesItem,
)
from .unstable_dataset_entry_create_request_entries_item_response_format import (
    UnstableDatasetEntryCreateRequestEntriesItemResponseFormat,
)
from .unstable_dataset_entry_create_request_entries_item_split import UnstableDatasetEntryCreateRequestEntriesItemSplit
from .unstable_dataset_entry_create_request_entries_item_tool_choice import (
    UnstableDatasetEntryCreateRequestEntriesItemToolChoice,
)
from .unstable_dataset_entry_create_request_entries_item_tools_item import (
    UnstableDatasetEntryCreateRequestEntriesItemToolsItem,
)

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UnstableDatasetEntryCreateRequestEntriesItem(pydantic.BaseModel):
    messages: typing.List[UnstableDatasetEntryCreateRequestEntriesItemMessagesItem]
    function_call: typing.Optional[UnstableDatasetEntryCreateRequestEntriesItemFunctionCall]
    functions: typing.Optional[typing.List[UnstableDatasetEntryCreateRequestEntriesItemFunctionsItem]]
    tool_choice: typing.Optional[UnstableDatasetEntryCreateRequestEntriesItemToolChoice]
    tools: typing.Optional[typing.List[UnstableDatasetEntryCreateRequestEntriesItemToolsItem]]
    response_format: typing.Optional[UnstableDatasetEntryCreateRequestEntriesItemResponseFormat]
    split: typing.Optional[UnstableDatasetEntryCreateRequestEntriesItemSplit]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
