/* tslint:disable */
/* eslint-disable */
/**
 * OpenPipe API
 * The public API for reporting API calls to OpenPipe
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ExternalApiCheckCache200Response
 */
export interface ExternalApiCheckCache200Response {
    /**
     * JSON-encoded response payload
     * @type {any}
     * @memberof ExternalApiCheckCache200Response
     */
    'respPayload'?: any;
}
/**
 * 
 * @export
 * @interface ExternalApiCheckCacheDefaultResponse
 */
export interface ExternalApiCheckCacheDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof ExternalApiCheckCacheDefaultResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalApiCheckCacheDefaultResponse
     */
    'code': string;
    /**
     * 
     * @type {Array<ExternalApiCheckCacheDefaultResponseIssuesInner>}
     * @memberof ExternalApiCheckCacheDefaultResponse
     */
    'issues'?: Array<ExternalApiCheckCacheDefaultResponseIssuesInner>;
}
/**
 * 
 * @export
 * @interface ExternalApiCheckCacheDefaultResponseIssuesInner
 */
export interface ExternalApiCheckCacheDefaultResponseIssuesInner {
    /**
     * 
     * @type {string}
     * @memberof ExternalApiCheckCacheDefaultResponseIssuesInner
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ExternalApiCheckCacheRequest
 */
export interface ExternalApiCheckCacheRequest {
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof ExternalApiCheckCacheRequest
     */
    'requestedAt': number;
    /**
     * JSON-encoded request payload
     * @type {any}
     * @memberof ExternalApiCheckCacheRequest
     */
    'reqPayload'?: any;
    /**
     * Extra tags to attach to the call for filtering. Eg { \"userId\": \"123\", \"promptId\": \"populate-title\" }
     * @type {{ [key: string]: string; }}
     * @memberof ExternalApiCheckCacheRequest
     */
    'tags'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ExternalApiReportRequest
 */
export interface ExternalApiReportRequest {
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof ExternalApiReportRequest
     */
    'requestedAt': number;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof ExternalApiReportRequest
     */
    'receivedAt': number;
    /**
     * JSON-encoded request payload
     * @type {any}
     * @memberof ExternalApiReportRequest
     */
    'reqPayload'?: any;
    /**
     * JSON-encoded response payload
     * @type {any}
     * @memberof ExternalApiReportRequest
     */
    'respPayload'?: any;
    /**
     * HTTP status code of response
     * @type {number}
     * @memberof ExternalApiReportRequest
     */
    'statusCode'?: number;
    /**
     * User-friendly error message
     * @type {string}
     * @memberof ExternalApiReportRequest
     */
    'errorMessage'?: string;
    /**
     * Extra tags to attach to the call for filtering. Eg { \"userId\": \"123\", \"promptId\": \"populate-title\" }
     * @type {{ [key: string]: string; }}
     * @memberof ExternalApiReportRequest
     */
    'tags'?: { [key: string]: string; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if a prompt is cached
         * @param {ExternalApiCheckCacheRequest} externalApiCheckCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalApiCheckCache: async (externalApiCheckCacheRequest: ExternalApiCheckCacheRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalApiCheckCacheRequest' is not null or undefined
            assertParamExists('externalApiCheckCache', 'externalApiCheckCacheRequest', externalApiCheckCacheRequest)
            const localVarPath = `/v1/check-cache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalApiCheckCacheRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Report an API call
         * @param {ExternalApiReportRequest} externalApiReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalApiReport: async (externalApiReportRequest: ExternalApiReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalApiReportRequest' is not null or undefined
            assertParamExists('externalApiReport', 'externalApiReportRequest', externalApiReportRequest)
            const localVarPath = `/v1/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalApiReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if a prompt is cached
         * @param {ExternalApiCheckCacheRequest} externalApiCheckCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalApiCheckCache(externalApiCheckCacheRequest: ExternalApiCheckCacheRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalApiCheckCache200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalApiCheckCache(externalApiCheckCacheRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Report an API call
         * @param {ExternalApiReportRequest} externalApiReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async externalApiReport(externalApiReportRequest: ExternalApiReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.externalApiReport(externalApiReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Check if a prompt is cached
         * @param {ExternalApiCheckCacheRequest} externalApiCheckCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalApiCheckCache(externalApiCheckCacheRequest: ExternalApiCheckCacheRequest, options?: any): AxiosPromise<ExternalApiCheckCache200Response> {
            return localVarFp.externalApiCheckCache(externalApiCheckCacheRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Report an API call
         * @param {ExternalApiReportRequest} externalApiReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        externalApiReport(externalApiReportRequest: ExternalApiReportRequest, options?: any): AxiosPromise<any> {
            return localVarFp.externalApiReport(externalApiReportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Check if a prompt is cached
     * @param {ExternalApiCheckCacheRequest} externalApiCheckCacheRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public externalApiCheckCache(externalApiCheckCacheRequest: ExternalApiCheckCacheRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).externalApiCheckCache(externalApiCheckCacheRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Report an API call
     * @param {ExternalApiReportRequest} externalApiReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public externalApiReport(externalApiReportRequest: ExternalApiReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).externalApiReport(externalApiReportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


