// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Experiment {
    id    String @id @default(uuid()) @db.Uuid
    label String

    sortIndex Int @default(0)

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    TemplateVariable TemplateVariable[]
    PromptVariant    PromptVariant[]
    TestScenario     TestScenario[]
    Evaluation       Evaluation[]
}

model PromptVariant {
    id    String @id @default(uuid()) @db.Uuid
    label String

    constructFn String

    uiId      String  @default(uuid()) @db.Uuid
    visible   Boolean @default(true)
    sortIndex Int     @default(0)

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    scenarioVariantCells      ScenarioVariantCell[]
    EvaluationResult EvaluationResult[]

    @@index([uiId])
}

model TestScenario {
    id String @id @default(uuid()) @db.Uuid

    variableValues Json

    uiId      String  @default(uuid()) @db.Uuid
    visible   Boolean @default(true)
    sortIndex Int     @default(0)

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    scenarioVariantCells ScenarioVariantCell[]
}

model TemplateVariable {
    id String @id @default(uuid()) @db.Uuid

    label String

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum CellRetrievalStatus {
    PENDING
    IN_PROGRESS
    COMPLETE
    ERROR
}

model ScenarioVariantCell {
    id String @id @default(uuid()) @db.Uuid

    inputHash        String
    output           Json? // TODO: Remove once migration is complete
    statusCode       Int?
    errorMessage     String?
    timeToComplete   Int?     @default(0) // TODO: Remove once migration is complete
    retryTime        DateTime?
    streamingChannel String?
    retrievalStatus  CellRetrievalStatus @default(COMPLETE)

    promptTokens     Int? // TODO: Remove once migration is complete
    completionTokens Int? // TODO: Remove once migration is complete
    modelOutput      ModelOutput?

    promptVariantId String        @db.Uuid
    promptVariant   PromptVariant @relation(fields: [promptVariantId], references: [id], onDelete: Cascade)

    testScenarioId String       @db.Uuid
    testScenario   TestScenario @relation(fields: [testScenarioId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([promptVariantId, testScenarioId])
    @@index([inputHash])
}

model ModelOutput {
    id String @id @default(uuid()) @db.Uuid

    output           Json
    timeToComplete   Int     @default(0)
    promptTokens     Int?
    completionTokens Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    scenarioVariantCellId String        @db.Uuid
    scenarioVariantCell   ScenarioVariantCell @relation(fields: [scenarioVariantCellId], references: [id])

    @@unique([scenarioVariantCellId])
}

enum EvaluationMatchType {
    CONTAINS
    DOES_NOT_CONTAIN
}

model Evaluation {
    id String @id @default(uuid()) @db.Uuid

    name        String
    matchString String
    matchType   EvaluationMatchType

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    EvaluationResult EvaluationResult[]
}

model EvaluationResult {
    id String @id @default(uuid()) @db.Uuid

    passCount Int
    failCount Int

    evaluationId String     @db.Uuid
    evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

    promptVariantId String        @db.Uuid
    promptVariant   PromptVariant @relation(fields: [promptVariantId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([evaluationId, promptVariantId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
